# -*- coding: utf-8 -*-
"""OCR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hT9fjsOTUXPMfBSxHr-0xTFR5n9-HJwF
"""

import numpy as np
import pandas as pd
import os
import cv2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import ResNet50
from keras.layers import Input, Flatten, Dense
from keras.models import Model
from sklearn.preprocessing import LabelBinarizer
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers
from tensorflow.keras.layers import Conv2D,Dense,Flatten,MaxPooling2D
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.callbacks import EarlyStopping

from tensorflow.keras.datasets import mnist

def load_mnist():
    (train_data,train_label),(test_data,test_label)=mnist.load_data()
    data=np.vstack([train_data,test_data])
    labels=np.hstack([train_label,test_label])
    return (data,labels)

def AZ_dataset(path):
    dataset = pd.read_csv(path).astype('float32')
    dataset.rename(columns={'0':'label'}, inplace=True)
    X = dataset.drop('label',axis = 1)
    y = dataset['label']
    data=np.array(X)
    data=data.reshape(data.shape[0], 28, 28).astype('float32')
    labels=np.array(y,dtype="int")
    return (data,labels)

(data_digits,label_digits)=load_mnist()

data_AZ,label_AZ=AZ_dataset("/content/drive/MyDrive/A_Z Handwritten Data.csv")

label_AZ+=10
data=np.vstack([data_digits,data_AZ])
label=np.hstack([label_digits,label_AZ])

data = [cv2.resize(image, (32, 32)) for image in data]
data = np.array(data, dtype="float32")

data = np.expand_dims(data, axis=-1)
data /= 255.0

data.shape

label.shape

le = LabelBinarizer()
label = le.fit_transform(label)

le.classes_

from sklearn.model_selection import train_test_split
trainX,testX,trainY,testY=train_test_split(data,label,test_size=0.20, random_state=42)

testY.shape

testX.shape

aug = ImageDataGenerator(
rotation_range=10,
zoom_range=0.05,
width_shift_range=0.1,
height_shift_range=0.1,
shear_range=0.15,
horizontal_flip=False,
fill_mode="nearest")

model=Sequential()
model.add(Conv2D(filters=32,kernel_size=(5,5),padding='same',activation='relu',input_shape=(32,32,1)))
model.add(MaxPooling2D(strides=2))
model.add(Conv2D(filters=64,kernel_size=(5,5),padding='same',activation='relu'))
model.add(MaxPooling2D(strides=2))
model.add(Conv2D(filters=64,kernel_size=(5,5),padding='same',activation='relu'))
model.add(MaxPooling2D(strides=2))
model.add(Conv2D(filters=128,kernel_size=(5,5),padding='same',activation='relu'))
model.add(MaxPooling2D(strides=2))
model.add(Flatten())
model.add(Dense(256))
model.add(Dense(128))
model.add(Dense(36,activation='softmax'))

BS=128
EPOCHS=10
INIT_LR=1e-1
opt = SGD(learning_rate=INIT_LR, decay=INIT_LR / EPOCHS)
callback=EarlyStopping(monitor='val_loss',patience=5,verbose=1,mode='min')

model.compile(loss="categorical_crossentropy", optimizer=opt,metrics=["accuracy"])

H=model.fit_generator(aug.flow(trainX,trainY,batch_size=BS),validation_data=(testX,testY),steps_per_epoch=len(trainX)//BS,
                    epochs=EPOCHS,verbose=1,callbacks=[callback])

model.save("/content/drive/MyDrive/OCR_MODEL/OCR_model.h5",save_format=".h5")

labelNames = "0123456789"

labelNames += "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

labelNames = [l for l in labelNames]

predictions = model.predict(testX, batch_size=BS)

